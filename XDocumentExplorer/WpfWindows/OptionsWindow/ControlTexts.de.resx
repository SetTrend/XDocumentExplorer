<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="OptionsWin" xml:space="preserve">
    <value>Optionen</value>
  </data>
  <data name="OkButton" xml:space="preserve">
    <value>OK</value>
  </data>
  <data name="CancelButton" xml:space="preserve">
    <value>Abbrechen</value>
  </data>
  <data name="MruFileCapacity" xml:space="preserve">
    <value>Anzahl _zuletzt geöffneter Dateien:</value>
  </data>
  <data name="TabSize" xml:space="preserve">
    <value>Tabulator_größe:</value>
  </data>
  <data name="ReplaceTabs" xml:space="preserve">
    <value>Tabulatorzeichen im Text _ersetzen:</value>
  </data>
  <data name="MruCapacityInfo" xml:space="preserve">
    <value>Geben Sie hier die maximale Anzahl der Dateien ein, die im Untermenü "Zuletzt verwendet" angezeigt werden sollen.\nSie können hier eine Zahl zwischen 1 und 10 eintragen.</value>
  </data>
  <data name="ReplaceTabsInfo" xml:space="preserve">
    <value>Wenn dieses Kontrollkästchen aktiviert ist, werden alle Tabulatorzeichen im Texteingabefeld gegen die im Feld "Tabulatorgröße" eingetragene Anzahl an Leerzeichen ersetzt.\nDarüber hinaus werden, wenn eine bestehende Textdatei geöffnet wird, ebenfalls alle Tabulatorzeichen im Text gegen die entsprechende Anzahl an Leerzeichen ersetzt.\nDer Dateiinhalt wird in diesem Fall jedoch nicht als "verändert" markiert. Somit kann unveränderter Text geschlossen werden, ohne die ursprüngliche Datei zu verändern.</value>
  </data>
  <data name="TabSizeInfo" xml:space="preserve">
    <value>Geben Sie hier die Anzahl der Leerzeichen ein, die ein Tabulatorzeichen ersetzen sollen.\nDas Ändern dieses Wertes ändert nicht die Anzahl bereits im Texteingabefeld eingetragener Leerzeichen.</value>
  </data>
  <data name="EnhWriterInfo" xml:space="preserve">
    <value>Wenn dieses Kontrollkästchen aktiviert ist, wird für die Ausgabe des Inhalts des XDocument-Objekts im\nXML-Ausgabefeld des Hauptfensters der verbesserte XmlWriter verwendet, der von Axel Dahmen entwickelt wurde.\nIst das Kontrollkästchen deaktiviert, wird der Microsoft .NET XmlWriter verwendet.\n\nDer Microsoft .NET XmlWriter formatiert "xml:space=preserve" Inhalt nicht korrekt. Der von Axel Dahmen entwickelte,\nverbesserte XmlWriter behebt dieses Problem, findet jedoch nur in denjenigen Programmen Anwendung, die das\nentsprechende "AxDa.EnhancedXmlWriter"-NuGet-Paket einsetzen.</value>
  </data>
  <data name="EnhWriter" xml:space="preserve">
    <value>Verbesserten XML _Writer nutzen:</value>
  </data>
</root>